generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicles {
  id              Int       @id @default(autoincrement())
  brand           String    @db.VarChar(255)
  engine_capacity Float
  fuel_type       String    @db.VarChar(255)
  gearbox         String    @db.VarChar(255)
  mileage         Int       @default(0)
  model           String    @db.VarChar(255)
  power           Int
  power_unit      String    @db.VarChar(255)
  production_year Int
  type            String    @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  Fueling         Fueling[]
}

model Fueling {
  id                Int           @id @default(autoincrement())
  vehicleId         Int
  vehicle           Vehicles      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  amount            Float         @default(0.0)
  cost              Float         @default(0.0)
  date              DateTime?     @db.Date
  country           String?       @db.VarChar(255)
  region            String?       @db.VarChar(255)
  station           String?       @db.VarChar(255)
  type_of_fuel      TypeOfFuel    @default(GASOLINE)
  currency          String?       @db.VarChar(3)
  distance_traveled Float         @default(0.0)
  mileage           Float         @default(0.0)
  type_of_fueling   TypeOfFueling @default(FULL)
  tire_type         String?       @db.VarChar(255)
  air_conditioning  Boolean       @default(true)
}

enum TypeOfFuel {
  GASOLINE
  DIESEL
  LPG
  ELECTRIC
}

enum TypeOfFueling {
  FULL
  NOT_FULL
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
