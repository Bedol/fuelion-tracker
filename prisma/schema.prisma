generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id              Int       @id @default(autoincrement())
  user_id         Int
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  brand_name      String    @db.VarChar(255)
  model_name      String    @db.VarChar(255)
  engine_capacity Int
  production_year Int
  fuel_type_id    Int
  transmission_id Int
  engine_power    Int
  power_unit_id   Int
  type_id         Int
  mileage         Float     @default(0.0)
  mileage_in_id   Int
  value           Int
  currency_id     Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  fuelings        Fueling[]
  expenses        Expense[]
}

model Fueling {
  id                     Int       @id @default(autoincrement())
  quantity               Float     @default(0.0)
  cost                   Float     @default(0.0)
  cost_per_unit          Float     @default(0.0)
  air_conditioning       Boolean   @default(false)
  air_conditioning_value Int       @default(100)
  country                String?   @db.VarChar(2)
  region                 String?   @db.VarChar(255)
  station                String?   @db.VarChar(255)
  currency_id            Int
  date                   DateTime? @db.Date
  distance_traveled      Float     @default(0.0)
  mileage                Float     @default(0.0)
  fuel_type_id           Int
  full_tank              Boolean   @default(true)
  vehicle_id             Int
  vehicle                Vehicle   @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
}

model Expense {
  id          Int      @id @default(autoincrement())
  vehicle_id  Int
  vehicle     Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  date        DateTime @db.Date
  mileage     Float    @default(0.0)
  type_id     Int      @default(1)
  cost        Float    @default(0.0)
  currency_id Int
  comment     String
}

model Account {
  id                Int     @id @default(autoincrement())
  userId           Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  default_currency_id Int?
  default_country     String?   @db.VarChar(2)
  default_region      String?   @db.VarChar(255)
  favorite_station    String?   @db.VarChar(255)
  profile_completed   Boolean   @default(false)
  fuel_unit_id        Int?
  accounts            Account[]
  sessions            Session[]
  vehicles            Vehicle[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
